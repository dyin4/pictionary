{"ast":null,"code":"import store from \"./redux/store\";\nimport { newMessage, isConnected, getAllClients, clearSketch, updateStart, setCurrentPlayer, gameStatus } from \"./redux/actions\";\n/** CLIENT CONFIGURATION - connect to the server */\n\nconst socketIOClient = require(\"socket.io-client\"); // When deployed, connect to the hosted server, otherwise connect to local server\n// Localhost port must match server\n\n\nlet host = process.env.NODE_ENV === \"production\" ? \"herokuapp.com\" : \"localhost:4002\";\nlet socket = socketIOClient.connect(host, {\n  secure: true\n}); // Checks which host we're connected to (for troubleshooting);\n\nconsole.log(\"connected to \" + host);\nsocket.on(\"notification\", msg => {\n  console.log(msg);\n});\nsocket.on(\"all messages\", msg => {\n  console.log(msg);\n  store.dispatch(newMessage(msg));\n});\nsocket.on(\"chat joined\", () => {\n  store.dispatch(isConnected());\n}); // socket.on(\"game is in progress\", (data) => {\n//   console.log(\"game is in progress\", data);\n//   store.dispatch(gameStatus(data));\n// });\n\nsocket.on(\"clients\", clients => {\n  store.dispatch(getAllClients(clients));\n});\nsocket.on(\"game\", s => {\n  store.dispatch(updateStart(s));\n});\nsocket.on(\"clear\", p => {\n  store.dispatch(clearSketch(p));\n}); // This process will allow different clients to have duplicate usernames! A real\n// application should first check with the server to make sure the client's\n// username is unique.\n\nexport const joinChat = username => {\n  socket.emit(\"join\", username);\n};\nexport const sendMessage = msg => {\n  socket.emit(\"new message\", msg);\n};\nexport const sendRightAnswerMsg = msg => {\n  socket.emit(\"right answer\", msg);\n}; // export const start = (status) => {\n//   socket.emit(\"game\", status);\n// };\n\nexport const clear = p => {\n  socket.emit(\"clear\", p);\n};\nexport const end = () => {\n  socket.emit(\"game\", \"end\");\n};\nexport const startTheGame = (index, callbackFunc) => {\n  console.log(\"client\", index);\n  socket.off(\"current player\"); // Prevent duplicates\n\n  socket.emit(\"start timer\", index);\n  socket.on(\"current player\", time => {\n    console.log(\"current player\", time);\n    callbackFunc(time);\n  }); // socket.on(\"time\", (time) => {\n  //   callbackFunc2(time);\n  // });\n};\nexport const startTheTimer = (time, callbackFunc) => {\n  socket.off(\"time\"); // Prevent duplicates\n\n  socket.emit(\"start timer time\", time);\n  socket.on(\"time\", time => {\n    callbackFunc(time);\n  });\n};","map":{"version":3,"sources":["/Users/danyin/Desktop/CS7580/dan_yin_fan_fan_joyce_liu_xiaoyan_qin_finalproject/src/client.js"],"names":["store","newMessage","isConnected","getAllClients","clearSketch","updateStart","setCurrentPlayer","gameStatus","socketIOClient","require","host","process","env","NODE_ENV","socket","connect","secure","console","log","on","msg","dispatch","clients","s","p","joinChat","username","emit","sendMessage","sendRightAnswerMsg","clear","end","startTheGame","index","callbackFunc","off","time","startTheTimer"],"mappings":"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","sourcesContent":["import store from \"./redux/store\";\nimport {\n  newMessage,\n  isConnected,\n  getAllClients,\n  clearSketch,\n  updateStart,\n  setCurrentPlayer,\n  gameStatus,\n} from \"./redux/actions\";\n\n/** CLIENT CONFIGURATION - connect to the server */\nconst socketIOClient = require(\"socket.io-client\");\n\n// When deployed, connect to the hosted server, otherwise connect to local server\n// Localhost port must match server\nlet host =\n  process.env.NODE_ENV === \"production\" ? \"herokuapp.com\" : \"localhost:4002\";\nlet socket = socketIOClient.connect(host, { secure: true });\n// Checks which host we're connected to (for troubleshooting);\nconsole.log(\"connected to \" + host);\n\nsocket.on(\"notification\", (msg) => {\n  console.log(msg);\n});\n\nsocket.on(\"all messages\", (msg) => {\n  console.log(msg);\n  store.dispatch(newMessage(msg));\n});\n\nsocket.on(\"chat joined\", () => {\n  store.dispatch(isConnected());\n});\n\n// socket.on(\"game is in progress\", (data) => {\n//   console.log(\"game is in progress\", data);\n//   store.dispatch(gameStatus(data));\n// });\n\nsocket.on(\"clients\", (clients) => {\n  store.dispatch(getAllClients(clients));\n});\n\nsocket.on(\"game\", (s) => {\n  store.dispatch(updateStart(s));\n});\n\nsocket.on(\"clear\", (p) => {\n  store.dispatch(clearSketch(p));\n});\n\n// This process will allow different clients to have duplicate usernames! A real\n// application should first check with the server to make sure the client's\n// username is unique.\nexport const joinChat = (username) => {\n  socket.emit(\"join\", username);\n};\n\nexport const sendMessage = (msg) => {\n  socket.emit(\"new message\", msg);\n};\n\nexport const sendRightAnswerMsg = (msg) => {\n  socket.emit(\"right answer\", msg);\n};\n// export const start = (status) => {\n//   socket.emit(\"game\", status);\n// };\n\nexport const clear = (p) => {\n  socket.emit(\"clear\", p);\n};\n\nexport const end = () => {\n  socket.emit(\"game\", \"end\");\n};\n\nexport const startTheGame = (index, callbackFunc) => {\n  console.log(\"client\", index);\n  socket.off(\"current player\"); // Prevent duplicates\n  socket.emit(\"start timer\", index);\n  socket.on(\"current player\", (time) => {\n    console.log(\"current player\", time);\n    callbackFunc(time);\n  });\n  // socket.on(\"time\", (time) => {\n  //   callbackFunc2(time);\n  // });\n};\n\nexport const startTheTimer = (time, callbackFunc) => {\n  socket.off(\"time\"); // Prevent duplicates\n  socket.emit(\"start timer time\", time);\n\n  socket.on(\"time\", (time) => {\n    callbackFunc(time);\n  });\n};\n"]},"metadata":{},"sourceType":"module"}