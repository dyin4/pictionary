{"ast":null,"code":"import store from \"./redux/store\";\nimport { newMessage, isConnected, shareSketch } from \"./redux/actions\";\n/** CLIENT CONFIGURATION - connect to the server */\n\nconst socketIOClient = require(\"socket.io-client\"); // When deployed, connect to the hosted server, otherwise connect to local server\n// Localhost port must match server\n\n\nlet host = process.env.NODE_ENV === \"production\" ? \"appname.herokuapp.com\" : \"localhost:4002\";\nlet socket = socketIOClient.connect(host, {\n  secure: true\n}); // Checks which host we're connected to (for troubleshooting);\n\nconsole.log(\"connected to \" + host);\nsocket.on(\"notification\", msg => {\n  console.log(msg);\n});\nsocket.on(\"all messages\", msg => {\n  console.log(msg);\n  store.dispatch(newMessage(msg));\n});\nsocket.on(\"chat joined\", () => {\n  store.dispatch(isConnected());\n});\nsocket.on(\"DRAWING\", data => {\n  console.log(\"server \", data);\n  store.dispatch(shareSketch(data));\n}); // This process will allow different clients to have duplicate usernames! A real\n// application should first check with the server to make sure the client's\n// username is unique.\n\nexport const joinChat = username => {\n  socket.emit(\"join\", username);\n};\nexport const sendMessage = msg => {\n  socket.emit(\"new message\", msg);\n};\nexport const draw = prop => {\n  console.log(\"draw data\");\n  socket.emit(\"DRAWING\", prop);\n};","map":{"version":3,"sources":["/Users/danyin/Desktop/CS7580/dan_yin_fan_fan_joyce_liu_xiaoyan_qin_finalproject/src/client.js"],"names":["store","newMessage","isConnected","shareSketch","socketIOClient","require","host","process","env","NODE_ENV","socket","connect","secure","console","log","on","msg","dispatch","data","joinChat","username","emit","sendMessage","draw","prop"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,eAAlB;AACA,SAASC,UAAT,EAAqBC,WAArB,EAAkCC,WAAlC,QAAqD,iBAArD;AAEA;;AACA,MAAMC,cAAc,GAAGC,OAAO,CAAC,kBAAD,CAA9B,C,CAEA;AACA;;;AACA,IAAIC,IAAI,GACNC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GACI,uBADJ,GAEI,gBAHN;AAIA,IAAIC,MAAM,GAAGN,cAAc,CAACO,OAAf,CAAuBL,IAAvB,EAA6B;AAAEM,EAAAA,MAAM,EAAE;AAAV,CAA7B,CAAb,C,CACA;;AACAC,OAAO,CAACC,GAAR,CAAY,kBAAkBR,IAA9B;AAEAI,MAAM,CAACK,EAAP,CAAU,cAAV,EAA2BC,GAAD,IAAS;AACjCH,EAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AACD,CAFD;AAIAN,MAAM,CAACK,EAAP,CAAU,cAAV,EAA2BC,GAAD,IAAS;AACjCH,EAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AACAhB,EAAAA,KAAK,CAACiB,QAAN,CAAehB,UAAU,CAACe,GAAD,CAAzB;AACD,CAHD;AAKAN,MAAM,CAACK,EAAP,CAAU,aAAV,EAAyB,MAAM;AAC7Bf,EAAAA,KAAK,CAACiB,QAAN,CAAef,WAAW,EAA1B;AACD,CAFD;AAIAQ,MAAM,CAACK,EAAP,CAAU,SAAV,EAAsBG,IAAD,IAAU;AAC7BL,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBI,IAAvB;AACAlB,EAAAA,KAAK,CAACiB,QAAN,CAAed,WAAW,CAACe,IAAD,CAA1B;AACD,CAHD,E,CAKA;AACA;AACA;;AACA,OAAO,MAAMC,QAAQ,GAAIC,QAAD,IAAc;AACpCV,EAAAA,MAAM,CAACW,IAAP,CAAY,MAAZ,EAAoBD,QAApB;AACD,CAFM;AAIP,OAAO,MAAME,WAAW,GAAIN,GAAD,IAAS;AAClCN,EAAAA,MAAM,CAACW,IAAP,CAAY,aAAZ,EAA2BL,GAA3B;AACD,CAFM;AAIP,OAAO,MAAMO,IAAI,GAAIC,IAAD,IAAU;AAC5BX,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAJ,EAAAA,MAAM,CAACW,IAAP,CAAY,SAAZ,EAAuBG,IAAvB;AACD,CAHM","sourcesContent":["import store from \"./redux/store\";\nimport { newMessage, isConnected, shareSketch } from \"./redux/actions\";\n\n/** CLIENT CONFIGURATION - connect to the server */\nconst socketIOClient = require(\"socket.io-client\");\n\n// When deployed, connect to the hosted server, otherwise connect to local server\n// Localhost port must match server\nlet host =\n  process.env.NODE_ENV === \"production\"\n    ? \"appname.herokuapp.com\"\n    : \"localhost:4002\";\nlet socket = socketIOClient.connect(host, { secure: true });\n// Checks which host we're connected to (for troubleshooting);\nconsole.log(\"connected to \" + host);\n\nsocket.on(\"notification\", (msg) => {\n  console.log(msg);\n});\n\nsocket.on(\"all messages\", (msg) => {\n  console.log(msg);\n  store.dispatch(newMessage(msg));\n});\n\nsocket.on(\"chat joined\", () => {\n  store.dispatch(isConnected());\n});\n\nsocket.on(\"DRAWING\", (data) => {\n  console.log(\"server \", data);\n  store.dispatch(shareSketch(data));\n});\n\n// This process will allow different clients to have duplicate usernames! A real\n// application should first check with the server to make sure the client's\n// username is unique.\nexport const joinChat = (username) => {\n  socket.emit(\"join\", username);\n};\n\nexport const sendMessage = (msg) => {\n  socket.emit(\"new message\", msg);\n};\n\nexport const draw = (prop) => {\n  console.log(\"draw data\");\n  socket.emit(\"DRAWING\", prop);\n};\n"]},"metadata":{},"sourceType":"module"}