{"ast":null,"code":"import { createStore, applyMiddleware } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { NEW_MESSAGE, CONNECTED, CLEAR } from \"./actionConstants\";\nconst INITIAL_STATE = {\n  isConnected: false,\n  // Extra state property for the last extension activity\n  messages: [],\n  clear: false\n};\n\nconst rootReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case NEW_MESSAGE:\n      return { ...state,\n        messages: action.payload.messages\n      };\n\n    case CONNECTED:\n      return { ...state,\n        isConnected: true\n      };\n\n    case CLEAR:\n      return { ...state,\n        clear: action.payload.p\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default createStore(rootReducer, applyMiddleware(thunkMiddleware));","map":{"version":3,"sources":["/Users/danyin/Desktop/CS7580/dan_yin_fan_fan_joyce_liu_xiaoyan_qin_finalproject/src/redux/store.js"],"names":["createStore","applyMiddleware","thunkMiddleware","NEW_MESSAGE","CONNECTED","CLEAR","INITIAL_STATE","isConnected","messages","clear","rootReducer","state","action","type","payload","p"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,KAAjC,QAA8C,mBAA9C;AAEA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,WAAW,EAAE,KADO;AACA;AACpBC,EAAAA,QAAQ,EAAE,EAFU;AAGpBC,EAAAA,KAAK,EAAE;AAHa,CAAtB;;AAMA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGL,aAAT,EAAwBM,MAAxB,KAAmC;AACrD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKV,WAAL;AACE,aAAO,EAAE,GAAGQ,KAAL;AAAYH,QAAAA,QAAQ,EAAEI,MAAM,CAACE,OAAP,CAAeN;AAArC,OAAP;;AACF,SAAKJ,SAAL;AACE,aAAO,EAAE,GAAGO,KAAL;AAAYJ,QAAAA,WAAW,EAAE;AAAzB,OAAP;;AACF,SAAKF,KAAL;AACE,aAAO,EAAE,GAAGM,KAAL;AAAYF,QAAAA,KAAK,EAAEG,MAAM,CAACE,OAAP,CAAeC;AAAlC,OAAP;;AACF;AACE,aAAOJ,KAAP;AARJ;AAUD,CAXD;;AAaA,eAAeX,WAAW,CAACU,WAAD,EAAcT,eAAe,CAACC,eAAD,CAA7B,CAA1B","sourcesContent":["import { createStore, applyMiddleware } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { NEW_MESSAGE, CONNECTED, CLEAR } from \"./actionConstants\";\n\nconst INITIAL_STATE = {\n  isConnected: false, // Extra state property for the last extension activity\n  messages: [],\n  clear: false,\n};\n\nconst rootReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case NEW_MESSAGE:\n      return { ...state, messages: action.payload.messages };\n    case CONNECTED:\n      return { ...state, isConnected: true };\n    case CLEAR:\n      return { ...state, clear: action.payload.p };\n    default:\n      return state;\n  }\n};\n\nexport default createStore(rootReducer, applyMiddleware(thunkMiddleware));\n"]},"metadata":{},"sourceType":"module"}