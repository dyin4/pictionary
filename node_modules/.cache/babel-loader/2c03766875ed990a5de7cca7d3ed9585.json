{"ast":null,"code":"import store from \"./redux/store\";\nimport { newMessage, isConnected, shareSketch, clearSketch } from \"./redux/actions\";\n/** CLIENT CONFIGURATION - connect to the server */\n\nconst socketIOClient = require(\"socket.io-client\"); // When deployed, connect to the hosted server, otherwise connect to local server\n// Localhost port must match server\n\n\nlet host = process.env.NODE_ENV === \"production\" ? \"appname.herokuapp.com\" : \"localhost:4002\";\nlet socket = socketIOClient.connect(host, {\n  secure: true\n}); // Checks which host we're connected to (for troubleshooting);\n\nconsole.log(\"connected to \" + host);\nsocket.on(\"notification\", msg => {\n  console.log(msg);\n});\nsocket.on(\"all messages\", msg => {\n  console.log(msg);\n  store.dispatch(newMessage(msg));\n});\nsocket.on(\"chat joined\", () => {\n  store.dispatch(isConnected());\n});\nsocket.on(\"clear\", p => {\n  store.dispatch(clearSketch(p));\n}); // This process will allow different clients to have duplicate usernames! A real\n// application should first check with the server to make sure the client's\n// username is unique.\n\nexport const joinChat = username => {\n  socket.emit(\"join\", username);\n};\nexport const sendMessage = msg => {\n  socket.emit(\"new message\", msg);\n};\nexport const clear = p => {\n  socket.emit(\"clear\", p);\n};","map":{"version":3,"sources":["/Users/danyin/Desktop/CS7580/dan_yin_fan_fan_joyce_liu_xiaoyan_qin_finalproject/src/client.js"],"names":["store","newMessage","isConnected","shareSketch","clearSketch","socketIOClient","require","host","process","env","NODE_ENV","socket","connect","secure","console","log","on","msg","dispatch","p","joinChat","username","emit","sendMessage","clear"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,eAAlB;AACA,SACEC,UADF,EAEEC,WAFF,EAGEC,WAHF,EAIEC,WAJF,QAKO,iBALP;AAOA;;AACA,MAAMC,cAAc,GAAGC,OAAO,CAAC,kBAAD,CAA9B,C,CAEA;AACA;;;AACA,IAAIC,IAAI,GACNC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GACI,uBADJ,GAEI,gBAHN;AAIA,IAAIC,MAAM,GAAGN,cAAc,CAACO,OAAf,CAAuBL,IAAvB,EAA6B;AAAEM,EAAAA,MAAM,EAAE;AAAV,CAA7B,CAAb,C,CACA;;AACAC,OAAO,CAACC,GAAR,CAAY,kBAAkBR,IAA9B;AAEAI,MAAM,CAACK,EAAP,CAAU,cAAV,EAA2BC,GAAD,IAAS;AACjCH,EAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AACD,CAFD;AAIAN,MAAM,CAACK,EAAP,CAAU,cAAV,EAA2BC,GAAD,IAAS;AACjCH,EAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AACAjB,EAAAA,KAAK,CAACkB,QAAN,CAAejB,UAAU,CAACgB,GAAD,CAAzB;AACD,CAHD;AAKAN,MAAM,CAACK,EAAP,CAAU,aAAV,EAAyB,MAAM;AAC7BhB,EAAAA,KAAK,CAACkB,QAAN,CAAehB,WAAW,EAA1B;AACD,CAFD;AAIAS,MAAM,CAACK,EAAP,CAAU,OAAV,EAAoBG,CAAD,IAAO;AACxBnB,EAAAA,KAAK,CAACkB,QAAN,CAAed,WAAW,CAACe,CAAD,CAA1B;AACD,CAFD,E,CAIA;AACA;AACA;;AACA,OAAO,MAAMC,QAAQ,GAAIC,QAAD,IAAc;AACpCV,EAAAA,MAAM,CAACW,IAAP,CAAY,MAAZ,EAAoBD,QAApB;AACD,CAFM;AAIP,OAAO,MAAME,WAAW,GAAIN,GAAD,IAAS;AAClCN,EAAAA,MAAM,CAACW,IAAP,CAAY,aAAZ,EAA2BL,GAA3B;AACD,CAFM;AAIP,OAAO,MAAMO,KAAK,GAAIL,CAAD,IAAO;AAC1BR,EAAAA,MAAM,CAACW,IAAP,CAAY,OAAZ,EAAqBH,CAArB;AACD,CAFM","sourcesContent":["import store from \"./redux/store\";\nimport {\n  newMessage,\n  isConnected,\n  shareSketch,\n  clearSketch,\n} from \"./redux/actions\";\n\n/** CLIENT CONFIGURATION - connect to the server */\nconst socketIOClient = require(\"socket.io-client\");\n\n// When deployed, connect to the hosted server, otherwise connect to local server\n// Localhost port must match server\nlet host =\n  process.env.NODE_ENV === \"production\"\n    ? \"appname.herokuapp.com\"\n    : \"localhost:4002\";\nlet socket = socketIOClient.connect(host, { secure: true });\n// Checks which host we're connected to (for troubleshooting);\nconsole.log(\"connected to \" + host);\n\nsocket.on(\"notification\", (msg) => {\n  console.log(msg);\n});\n\nsocket.on(\"all messages\", (msg) => {\n  console.log(msg);\n  store.dispatch(newMessage(msg));\n});\n\nsocket.on(\"chat joined\", () => {\n  store.dispatch(isConnected());\n});\n\nsocket.on(\"clear\", (p) => {\n  store.dispatch(clearSketch(p));\n});\n\n// This process will allow different clients to have duplicate usernames! A real\n// application should first check with the server to make sure the client's\n// username is unique.\nexport const joinChat = (username) => {\n  socket.emit(\"join\", username);\n};\n\nexport const sendMessage = (msg) => {\n  socket.emit(\"new message\", msg);\n};\n\nexport const clear = (p) => {\n  socket.emit(\"clear\", p);\n};\n"]},"metadata":{},"sourceType":"module"}